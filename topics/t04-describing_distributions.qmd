---
title: "Describing distributions of data" # title 
subtitle: "Visualizing your data is the first line of defense against bad data" # sub title
description: "9/12-9/18" #date range
---

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse);library(readxl); 
library(pander); library(janitor)

# Function to clean strings & separate into lists
str_prep <- function(var){
  as.list(
    str_split(var, "\r\n", simplify=TRUE)
    )
}

topic_mats <- read_excel("../schedule_615.xlsx", sheet="weekly_schedule") %>%
  clean_names() %>% 
  filter(grepl("t04", topic)) %>%
  mutate(assignment = gsub("hw", "../hw/hw", hw), 
         slides = sprintf("[%s](%s)", topic_name, paste0("../slides/", lecture, ".html"))) %>% 
  select(slides, collab, reading, assignment, topic_obj)
```

## Learning Path

### Where we've been
Importing & starting to wrangle our data

### Where we're at
Ready to visualize and learn characteristics of our data. 


### Objectives

```{r}
pander(str_prep(topic_mats$topic_obj))
```


## Learning Materials

{{< fa person-chalkboard >}}  **Slides (Will open in full screen. Right click to open in a new tab)**

```{r}
pander(str_prep(topic_mats$slides))
```

:books:  **Reading** 

```{r}
pander(str_prep(topic_mats$reading))
```


:pencil: **Collaborative notes**

```{r}
pander(str_prep(topic_mats$collab))
```

## Assignments

```{r}
pander(str_prep(topic_mats$assignment))
```

---

# Notes
:exclamation: New. I'm not too happy with the slide format, so i'm testing out a 'single page' format (which is what I historically have done anyhow)


### Motivation
Visualizing your data is hands down the most important thing you can learn to do. 

* Screen for data entry errors
* Out of range variables
* Mistakes in coding
* Violation of model assumptions

### Level of care depends on the audience {.smaller}

There are three main audiences in mind when creating data visualizations: 

1. For your eyes only (FYEO). These are quick and dirty plots, without annotation. Meant to be looked at once or twice. 
    - You'll create a TON of these. Don't spend a ton of time on them. 
    
2. To share with others internally. These mostly need to stand on their own. Axes labels, titles, colors as needed, possibly captions.
    - You'll create a lot of these, and you'll get better with practice at adding necessary annotation without a lot of time
    

3. Professional - Contains all bells and whistles needed to make it publication quality. 
    - You'll create very few of these, but they demand a lot of time, detail and thought. 

### Graphing with intent

Along with having the audience in mind, it is important to give thought to the purpose of the chart.

> The effectiveness of any visualization can be measured according to how well it fulfills the tasks it was designed for. (A. Cairo, 2018).


### Choosing Appropriate Visualization

75% of your choice is determined by the data type

[https://r-graph-gallery.com/](https://r-graph-gallery.com/)

## Meet the Palmer Penguins

<img src="../images/penguins.png" width="60%">

```{r}
#| echo: true
library(palmerpenguins) # for access to the penguin data
library(ggplot2)        # part of the tidyverse, but I'm being explicit here
library(sjPlot)         # alternative plotting package. GREAT for barcharts
pen <- penguins         # create a copy with a shorter name b/c I'm lazy
```

## Single Categorical Variable

::: {.panel-tabset}
### Tables

**Frequencies (N)**
```{r}
#| echo: true
table(pen$species)
```

**Percents (%)**
```{r}
#| echo: true
table(pen$species) |> proportions() |> round(digits=2)
```

Penguin species _Adelie_ make up 44% of the sample (n=152)

### Plots

```{r}
#| echo: true
#| fig.height:  4
sjPlot::plot_frq(pen$species) + xlab("Species")
```
:::

:::{.callout-tip}
Meet the base "pipe" `|>`

This functions sufficiently the same as `%>%` but doesn't require the `magrittr` package (part of the `tidyverse`). 
You are welcome to use either. 
:::


## Single Numeric Variable

<img src="../images/culmen_depth.png" width="50%">


::: {.panel-tabset}
#### Center
```{r}
#| echo: true
summary(pen$bill_depth_mm)
sd(pen$bill_depth_mm, na.rm=TRUE)
```

\

The average bill depth is 17.15mm, with a standard deviation of 1.9mm. 

#### Spread

```{r}
#| echo: true
summary(pen$bill_depth_mm)
IQR(pen$bill_depth_mm, na.rm=TRUE)
```
\

Bill depth ranges from 13.1 to 21.5mm, and has an IQR of 3.1mm.


#### Plots

:::: {.columns}

::: {.column width="50%"}
```{r}
#| echo: true
ggpubr::gghistogram(pen$bill_depth_mm, add_density = TRUE)
```

:::

::: {.column width="50%"}
```{r}
#| echo: true
ggpubr::ggviolin(pen$bill_depth_mm, add = c("jitter", "boxplot")) + coord_flip()
```

:::

::::

The distribution of bill depth appears to be bimodal with peaks around 15 and 18mm. 

:::

### How to create graphs

* Similar to the data management section, after identifying what you want to do, you go look up how to do that thing. 
* Don't expect to remember the exact code yet, just know where to look up an example and copy from there (all the ref's below)
* copy/paste/pray
* Keep graphs simple until you get more comfortable. 


### References

* PMA6 Chapter 4 for appropriate plot choices
* Applied Stats course Notes Chapter 2.3 for examples and code
* HackMD Notes for Code specific notes
* R specific help on the [Math 130](https://norcalbiostat.github.io/MATH130/faq.html) class page
* `sjPlot` vignette: https://strengejacke.github.io/sjPlot/index.html
* `ggpubr` vignette: https://rpkgs.datanovia.com/ggpubr/
* `ggplot` vignette: https://ggplot2.tidyverse.org/index.html
* R graphics cookbook: https://r-graphics.org/ 


