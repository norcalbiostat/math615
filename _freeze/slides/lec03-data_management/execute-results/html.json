{
  "hash": "50016ff4eff676625f29659aa795e50e",
  "result": {
    "markdown": "---\ntitle: \"Preparing your data for analysis\"\ndate: \"2022-08-31\"\ndescription: \"3, 4\"\nauthor: \"Robin Donatello\"\nfooter: \"[ðŸ”— https://math615.netlify.app](https://math615.netlify.app) / Preparing your data for analysis\"\nfrom: markdown+emoji\nformat: \n  revealjs:\n    theme: beige\n    multiplex: true\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: true\nknitr:\n  opts_chunk: \n    R.options:\n      width: 200\n---\n\n\n# Workflow and Data Cleaning\n\n## Workflows\n\nOnce the data are available from a study there are still a number of steps that must be undertaken to get them into shape for analysis.\n\nOne of the most misunderstood parts of the analysis process is the data preparation stage. To say that 70% of any analysis is spent on the data management stage is not an understatement.\n\n## \n\n![Example workflow](images/Afifi_Fig3_1.png)\n\n## Generating a reproducible workflows\n\nReproducibility is the ability for any researcher to take the same data set and run the same set of software program instructions as another researcher and achieve the same results.\n\n*Not the same as **replicability** where you re-run an experiment and achieve the same outcomes.*\n\nThe goal is to create an exact record of what was done to a data set to produce a specific result.\n\n## Three steps to achieve reproducibility\n\n1.  The un-processed data are connected directly to software code file(s) that perform data preparation techniques.\n2.  The processed data are connected directly to other software code file(s) that perform the analyses.\n3.  All data and code files are self-contained such that they could be given to another researcher to execute the code commands on a separate computer and achieve the same results as the original author.\n\n## Literate programming\n\n-   Explain the logic of the program or analysis process in a natural language,\n-   Small code snippets included at each step act as a full set of instructions that can be executed to reproduce the result/analysis being discussed.\n-   Literate programming tools such as Markdown, Quarto and $\\LaTeX$ are integrated into all common statistical packages except SPSS.\n\n## Reproducible Research + Literate Programming {.smaller}\n\n-   Practicing reproducible research techniques using literate programming tools allows such major updates to be a simple matter of re-compiling all coded instructions using the updated data set.\n-   The effort then is reduced to a careful review and update of any written results.\n-   Using literate programming tools create formatted documents in a streamlined manner that is fully synchronized with the code itself.\n-   The author writes the text explanations, interpretations, and code in the statistical software program itself, and the program will execute all commands and combine the text, code and output all together into a final dynamic document.\n\n## Why all the fuss? {.smaller}\n\n-   You are your own collaborator 6 months from now. Be nice to your future self\n-   Explain your steps (what and why)\n    -   How did you get from point A to B?\n    -   Why did you recode this variable in this manner?\n-   Found an error in your analysis code? Need to add an analysis to your presentation?\n-   Reproduce your steps in a few clicks using a script file (`.R`, `.Rmd`, `.sas`, `.sps`, `.do`, `.ipynb`)\n\n![Figure Credits: [Roger Peng](http://www.biostat.jhsph.edu/~rpeng/)](images/pipeline.png)\n\n# Data Analysis Pipeline\n\n![](https://d33wubrfki0l68.cloudfront.net/571b056757d68e6df81a3e3853f54d3c76ad6efc/32d37/diagrams/data-science.png)\n\nThis week is all about importing, tidying and transforming.\n\n## Project Structure / Follow along for R users\n\n1.  Start a new R project and connect it to your Math 615 folder. This will help keep all your files for this class self-contained.\n2.  Install the following packages by copying the following code and pasting it into the console. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"here\")\ninstall.packages(\"tidyverse\")\ninstall.packages(\"palmerpenguins\")\ninstall.packages(\"rmarkdown\")\n```\n:::\n\n\nOutside of class you will also need to install the following packages: `knitr, kableExtra, scales, sjPlot, ggpubr, RcolorBrewer, janitor`, but we won't use some of these until Hw4. \n\n## Using Projects\n\nGreat, you made a project but how do you use it? \n\nInstead of opening a single script file, you will open the project itself. It has the same cube like icon that you see in the top right of Rstudio. \n\n![](images/rproj.png)\n\nThen from your bottom left pane, in the `files` tab you can open all of your script files. \n\n## Hello Quarto\n\n<https://quarto.org/docs/get-started/hello/rstudio.html>\n\n## Creating a PDF\n\nGreat! You rendered your first literate document to an HTML format. Great for viewing, not so great for printing or emailing. We need to do one more thing before we can render this document to a pdf. Install a typesetting program called \\LaTeX (lah-tek or lay-tek). \n\n\\\n\n**Step 1: Copy the code below to install the `tinytex` package:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tinytex\")\n```\n:::\n\n\n## Install LaTeX\n\nOnce that is fully complete and you see the R console windows showing a `>` waiting for you, copy the following code to have tinytex install \\LaTeX for you. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntinytex::install_tinytex()\n```\n:::\n\n\nThis will take some time. Be patient, and wait for R to display a `>` in the console. \n\n## Test your installation. \n\nChange the output format of your quarto file to `pdf` in the YAML header (At the very top of your code file, line 2 or 3). \n\n```verbatim\n---\nformat: pdf\n---\n```\n\nNow click `render` and see if it creates a PDF. \n\nThe PDF should automatically pop up, otherwise check your `Math615` folder _in the same location as your script file is saved_ and see if a PDF is located there. \n\n\n## Data Import\n\n1. Create a new Quarto file named `dm_dataset.qmd` where `dataset` is YOUR dataset  name. E.g. `dm_addhealth.qmd`. \n2. Save this file in your `Math615/scripts` folder. \n3. Copy this code into a new code chunk. \n\n``` verbatim\nlibrary(here)\nlibrary(tidyverse)\n\nraw <- read_csv(here(\"data\", \"data.csv\"))\n```\n\n4. Replace the `data.csv` with YOUR data set name exactly as it shows in your files window (bottom right). \n5. Run this code chunk only (not render)\n\n## Peek at your data\n\nOkay, did it work? \n\n1. Look in the top right Environment pane. Do you see a dataset named `raw`? Does it have an expected number of rows and columns? \n2. Use the `glimpse()` function from the `tidyverse` package to get a snapshot of what the data looks like. (# of rows, columns, data types). Type the following code in the console to see a summary of what R sees as your variable names and data types.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(raw)\n```\n:::\n\n\nDon't worry much more about interpreting this now. We'll start exploring data next week. 7\n\n## Initial Data Screening\n\nUse functions like `str()`, `typeof()` to see what data type R thinks your variables are.\n\nUse `table()` or `summary()` to see the range of values present.\n\n## Data Prep questions {.smaller}\n\nQuestions to ask yourself (and the data) while reviewing the codebook to choose variables to be used in an analysis.\n\n-   Do you need to code out missing data? (`N/A`, `MISSING` ,`-99`)\n-   Do you need to make response codes more logical?\n    -   Some systems will record 1=YES and 2=NO. This should be changed so 0=NO.\n-   Do you need to recode numerical variables to categorical?\n    -   Sometimes categorical data will be recorded as 1, 2, 3 etc when those numbers represent named categories.\n-   Do you need to create secondary variables?\n    -   Such as an average across measures to create a score.\n\n::: aside\nSome of these answers will come only after you look at your data. This can be looking at the raw data itself but also looking at tables and charts generated from the data. Often when you try to create a plot or table you will encounter an error or something odd looking that will be the notification that something has to be adjusted.\n:::\n\n## How do I actually do this?\n\n-   After you identify what you need to do, you have to find an example of how to code the task you want.\n-   The [Applied Stats Course notes](https://norcalbiostat.github.io/AppliedStatistics_notes/data-management.html) has specific examples on how to handle certain/common circumstances.\n-   Take it one variable at a time.\n- Write your successes/code in the [Collaborative R Notes](https://hackmd.io/@norcalbiostat/R) as a quick reference for you, and others. You can see how the [SPSS](https://hackmd.io/@norcalbiostat/SPSS) students did it in years prior. \n\n## Closing thoughts\n\n-   Do not underestimate the importance of this step\n-   It will take you far, far longer than you anticipate to 'clean' your data\n-   Writing code (in any language) will be challenging, but will pay off in the long run\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}