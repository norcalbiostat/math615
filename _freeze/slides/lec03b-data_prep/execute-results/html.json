{
  "hash": "2d72562c26c5e580919f894c8667d30f",
  "result": {
    "markdown": "---\ntitle: \"Preparing your data for analysis\"\ndate: \"2025-09-10\"\ndescription: \"lec03b\"\nauthor: \"Robin Donatello\"\nfrom: markdown+emoji\nformat: \n  revealjs:\n    theme: sky\n    transition: fade\n    slide-number: true\n    incremental: false \n    code-fold: show\nexecute:\n  freeze: auto\n  echo: true\nknitr:\n  opts_chunk: \n    R.options:\n      width: 200\n---\n\n\n\n\n[![Data science process](https://d33wubrfki0l68.cloudfront.net/571b056757d68e6df81a3e3853f54d3c76ad6efc/32d37/diagrams/data-science.png){fig-alt=\"A line diagram of figure 1.1 from the book R for Data science\" width=\"682\"}](https://r4ds.hadley.nz/intro)\n\n## Requirements\n\nThese notes assume the following...\n\n* you have R and R Studio installed\n* at least the `tidyverse` and `here` packages installed\n* Converted your Math 615 folder to an R project\n* have successfully rendered a quarto document to PDF. \n\nSee [ASCN Ch 19.1-19.8](https://norcalbiostat.github.io/AppliedStatistics_notes/setup_intro.html) for details if you still need help. \n\n## Import {.smaller}\n\n1. Open your MATH 615 R Project\n2. Go to [Homework 03](https://math615.netlify.app/hw/hw03-dm) and complete step 1 ONLY.\n3. Confirm your data is in your `data` folder. \n5. Modify the import code on line 13 to correctly import _your_ data set. If you are using one of my data sets, there should be a file in the folder that gives you the correct import code.  \n6.  Run this code chunk only (not render)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nraw <- palmerpenguins::penguins_raw # for demo only\n```\n:::\n\n\n\n## Confirm import was successful\n\nOkay, did it work?\n\n* Look in the top right Environment pane. Do you see a dataset named `raw`? Does it have an expected number of rows and columns?\n* Click on the table icon to open the data set in a spreadsheet like view. Are the variable names correct? Does the data look correct? \n\n## Restrict to analysis variables\n\n* Reduce cogitative load by making a \"working\" data set that only contains variables that you immediately care about. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- raw %>% select(Species, Island, `Body Mass (g)`)\n```\n:::\n\n\n\n\n## Initial Data Screening {.smaller}\n\nUse functions like `str()` or `glimpse()` to see what data type R thinks your variables are for the whole data set\n\n::: {.panel-tabset}\n## `glimpse`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mydata)    # from the tidyverse/dplyr dataset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 3\n$ Species         <chr> \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Penguin (Pygoscelis adeliae)\", \"Adelie Penguin (P…\n$ Island          <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torg…\n$ `Body Mass (g)` <dbl> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, 4250, 3300, 3700, 3200, 3800, 4400, 3700, 3450, 4500, 3325, 4200, 3400, 3600, 3800, 3950, 3800, 3800, 3550, 3200, 3150, 39…\n```\n:::\n:::\n\n\n\n## `str`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mydata)    \n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [344 × 3] (S3: tbl_df/tbl/data.frame)\n $ Species      : chr [1:344] \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie Penguin (Pygoscelis adeliae)\" ...\n $ Island       : chr [1:344] \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" ...\n $ Body Mass (g): num [1:344] 3750 3800 3250 NA 3450 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   studyName = col_character(),\n  ..   `Sample Number` = col_double(),\n  ..   Species = col_character(),\n  ..   Region = col_character(),\n  ..   Island = col_character(),\n  ..   Stage = col_character(),\n  ..   `Individual ID` = col_character(),\n  ..   `Clutch Completion` = col_character(),\n  ..   `Date Egg` = col_date(format = \"\"),\n  ..   `Culmen Length (mm)` = col_double(),\n  ..   `Culmen Depth (mm)` = col_double(),\n  ..   `Flipper Length (mm)` = col_double(),\n  ..   `Body Mass (g)` = col_double(),\n  ..   Sex = col_character(),\n  ..   `Delta 15 N (o/oo)` = col_double(),\n  ..   `Delta 13 C (o/oo)` = col_double(),\n  ..   Comments = col_character()\n  .. )\n```\n:::\n:::\n\n\n:::\n\nBoth views show you the variable names, data types, and what the data in the first few rows looks like. \n\n## Initial Data Screening - single variable\n\nYou can also look at the data type for a single variable at a time. \n\n::: {.panel-tabset}\n## `typeof`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(mydata$Island) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n\n## `class`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(mydata$Island) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n\n## `str`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mydata$Island) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:344] \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" ...\n```\n:::\n:::\n\n\n::::\n\n## Check plausibility of data values {.smaller}\n\nConfirm these values follow the expected values according to the codebook. \n\n::: {.panel-tabset}\n\n## Categorical \nUse `table()` for categorical variables to see the frequency of unique levels of that variable. Note any levels with less than 10 observations or variables with more than 10 levels. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(mydata$Island)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   Biscoe     Dream Torgersen \n      168       124        52 \n```\n:::\n:::\n\n\n\n## Numeric\nYou can use `summary()` on numeric variables to see the range of values present. Note the amount of missing values, the spread of the data, and any out of range values (e.g. 99 or 7 on a binary yes/no that should only be 0/1). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mydata$`Body Mass (g)`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   2700    3550    4050    4202    4750    6300       2 \n```\n:::\n:::\n\n\n\n::::\n\n## Data Prep questions {.smaller}\n\nQuestions to ask yourself (and the data) while reviewing the codebook to choose variables to be used in an analysis.\n\n1. Are there codes that indicate missing? E.g. *MISSING* or *-99*? \n2. Do you need to make response codes more logical? \n    - Some systems will record 1=YES and 2=NO. This should be changed to 0=NO. \n3. Do you need to recode numerical variables to categorical?\n    - Sometimes categorical data will be recorded as 1, 2, 3 etc when those numbers represent named categories. \n4. Do you need to create secondary variables such as an average across measures to create a score. \n5. Are the variable names user friendly? Mixtures of CAPS and lower case, names with spaces or special characters should all be changed. Use the `janitor::clean_names()` function to resolve this. \n\n## How do I know what needs to be done?\n\nSome of these answers will come only after you look at your data. This can be looking at the raw data itself but also looking at tables and charts generated from the data.\n\nOften when you try to create a plot or table you will encounter an error or something odd looking that will be the notification that something has to be adjusted.\n\n## How do I actually make the necessary changes?\n\n-   After you identify what you need to do, you have to find an example of how to code the task you want.\n-   The [Applied Stats Course notes](https://norcalbiostat.github.io/AppliedStatistics_notes/data-management.html) has specific examples on how to handle common changes\n-   Take it one variable at a time.\n\n## Looking for help \n\n* The internets can be a wonderful thing when it comes to learning new things. \n* The R landscape moves fast. Restrict your search to the past ~4 years. \n* Use keywords like `R project` or searching for package `vignette`s\n* Stack Overflow and the Posit Community can have gems!\n\nYou will start to build up your repertoire of bookmarked sites you like to use.  \n\n## Using Chat GPT to write code\n\n:::{.callout-note}\n### Example prompt\nUsing the palmer penguins dataset in R write me R code to change the factor order of the islands variable to put Dream first\n:::\n\n* I told it to use a built in data set\n* I told it to use R\n* I used R terminology such as \"factor order\" and \"variable\"\n\nWhat did it give? \n\n## {#chatgpt data-menu-title=\"Chat GPT's answer\" .smaller}\n\nSure, here's an example of how you can change the factor order of the `island` variable in the Palmer Penguins dataset to put \"Dream\" first using R:\n\n```r\n# Load necessary packages\nlibrary(palmerpenguins)\n\n# Load the dataset\ndata(\"penguins\")\n\n# Check the current levels of the 'island' factor\nlevels(penguins$island)\n\n# Reorder the levels of the 'island' factor to put \"Dream\" first\npenguins$island <- factor(penguins$island, levels = c(\"Dream\", \"Torgersen\", \"Biscoe\"))\n\n# Check the new order of levels\nlevels(penguins$island)\n```\n\nIn this code, we're first loading the `palmerpenguins` package, which provides access to the dataset. Then we load the dataset itself using `data(\"penguins\")`. We check the current levels of the `island` factor using `levels(penguins$island)`.\n\nNext, we use the `factor()` function to reorder the levels of the `island` variable. We specify the desired order of levels using the `levels` argument. In this case, we put \"Dream\" first, followed by the other islands. Finally, we check the new order of levels to make sure the change was successful.\n\n\n## Use it as a learning tool\n\nNot only did it write the code, it wrote _literate_ code. It has code comments (lines 1, 4, 7, prefixed with a `#`), and a full text explanation. \n\nThis is GREAT for **learning** how to write code!\n\n:::{.callout-important}\n### Plagerism warning\n\nRead the Syllabus on what is expected of you if you use this tool to aid in your writing [https://math615.netlify.app/syllabus#use-of-ai](https://math615.netlify.app/syllabus#use-of-ai)\n:::\n\n:warning: Trust but verify! AI is not always correct! Also, this does not replace the necessity of you learning. \n\n## Save an analysis-ready data set {.smaller}\n\n* The very last thing you should do in your data management script is save an analysis ready or \"clean\" data file. \n* Advised to save it as a `.Rdata` file to maintain your factor orderings\n* You may want to do one more round of using `select()` to drop variables that you don't want anymore\n* Do this at the bottom of your homework dm script file now. \n* Every time you render this `dm` file, it will overwrite the cleaned data with the same name - thus ensuring that your analysis data set is always programmatically connected to your raw data set, and all choices documented. \n\n\n## Collaborating with others\n\n* It's critically important that both of you are using the same slice/filter section of data\n    * And if one person made a new variable, the other person should have that code also. \n* If you and your partner know git -- use it. \n* Other methods are to store all files (and R project) in a shared Box/Dropbox/Google Drive type folder. \n\n## Closing thoughts {.smaller}\n\n-   Do not underestimate the importance of this step\n-   It will take you far, far longer than you anticipate to 'clean' your data\n-   Effort spent here is a direct correlation with payoff. \n-   Writing code (in any language) will be challenging, but will pay off in the long run\n-   Don't reinvent the wheel. If you want to do something, chances are someone else has done it before. Perhaps even yourself! \n-   Programming in R is **not** like programming in Python or any flavor of C. Things that are efficient or necessary in those languages (e.g. loops) make your R code unreadable and clunky. \n",
    "supporting": [
      "lec03b-data_prep_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}