{
  "hash": "0d7f465d14e980d4bb6b1f86aec60fcc",
  "result": {
    "markdown": "---\ntitle: \"Describing Distributions of Data\"\ndate: \"2022-09-12\"\ndescription: \"4\"\nauthor: \"Robin Donatello\"\nfooter: \"[ðŸ”— https://norcalbiostat.github.io/MATH615](https://norcalbiostat.github.io/MATH615/) / Describing  Distributions of Data\"\nfrom: markdown+emoji\nformat: \n  revealjs:\n#    theme: ../slides.scss\n    multiplex: true\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: true\nknitr:\n  opts_chunk: \n    R.options:\n      width: 200\n---\n\n\n## Motivation\nVisualizing your data is hands down the most important thing you can learn to do. \n\n* Screen for data entry errors\n* Out of range variables\n* Mistakes in coding\n* Violation of model assumptions\n\n## Level of care depends on the audience {.smaller}\n\nThere are three main audiences in mind when creating data visualizations: \n\n1. For your eyes only (FYEO). These are quick and dirty plots, without annotation. Meant to be looked at once or twice. \n    - You'll create a TON of these. Don't spend a ton of time on them. \n    \n. . . \n\n2. To share with others internally. These mostly need to stand on their own. Axes labels, titles, colors as needed, possibly captions.\n    - You'll create a lot of these, and you'll get better with practice at adding necessary annotation without a lot of time\n    \n. . . \n\n3. Professional - Contains all bells and whistles needed to make it publication quality. \n    - You'll create very few of these, but they demand a lot of time, detail and thought. \n\n\n## Choosing Appropriate Visualization\n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\n<br>\n<br>\nIt entirely depends on the data type. \n:::\n\n::: {.column width=\"70%\"}\n![Crappy screenshot of PMA6 Table 4.7](images/pma6_data_viz_table.png)\n:::\n\n::::\n\n## \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n**Categorical**\n\n* Summary Statistics: N, %\n* Tables: Frequency & proportions\n* Plots: Bar charts, (pie charts on occasion)\n:::\n\n::: {.column width=\"50%\"}\n**Continuous**\n\n* Summary Statistics: \n  - A measure of center: mean or median\n  - A measure of variability: standard deviation, range, IQR\n* Plots: Histogram, density plot, boxplot, violin plot\n\n:::\n\n::::\n\n\n## How to create graphs\n\n* Similar to the data management section, after identifying what you want to do, you go look up how to do that thing. \n* Don't expect to remember the exact code yet, just know where to look up an example and copy from there\n* copy/paste/pray\n* Keep it simple until you get more comfortable. \n\n## References\n\n* PMA6 Chapter 4 for appropriate plot choices\n* Applied Stats course Notes Chapter 2.3 for examples and code\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}