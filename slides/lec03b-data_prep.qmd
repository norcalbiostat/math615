---
title: "Preparing your data for analysis"
date: "2024-09-09"
author: "Robin Donatello"
footer: "[ðŸ”— https://math615.netlify.app](https://math615.netlify.app) / Preparing your data for analysis"
from: markdown+emoji
format: 
  revealjs:
    theme: sky
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true
execute:
  freeze: auto
  echo: true
knitr:
  opts_chunk: 
    R.options:
      width: 200
---


[![Data science process](https://d33wubrfki0l68.cloudfront.net/571b056757d68e6df81a3e3853f54d3c76ad6efc/32d37/diagrams/data-science.png){fig-alt="A line diagram of figure 1.1 from the book R for Data science" width="682"}](https://r4ds.hadley.nz/intro)

## Requirements

These notes assume the following...

* you have R and R Studio installed
* at least the `tidyverse` and `here` packages installed
* Converted your Math 615 folder to an R project
* have successfully rendered a quarto document to PDF. 

See [ASCN Ch 19.1-19.8](https://norcalbiostat.github.io/AppliedStatistics_notes/setup_intro.html) for details if you still need help. 

## Import {.smaller}

1. Open your MATH 615 R Project
2. Create a new Quarto file named `dm_dataset.qmd` where `dataset` is YOUR dataset name. E.g. `dm_addhealth.qmd`.
3.  Save this file in your `Math615/scripts` folder.
4.  Copy the following code into a new code chunk.

```{r, eval=1}
library(tidyverse)
raw <- read_csv(here::here("data", "data.csv"))
```

5.  Replace the `data.csv` with YOUR data set name exactly as it shows in your files window (bottom right).
6.  Run this code chunk only (not render)

```{r, echo=FALSE}
raw <- palmerpenguins::penguins_raw # for demo only
```

## Confirm import was successful

Okay, did it work?

* Look in the top right Environment pane. Do you see a dataset named `raw`? Does it have an expected number of rows and columns?
* Click on the table icon to open the data set in a spreadsheet like view. Are the variable names correct? Does the data look correct? 


## Initial Data Screening {.smaller}

Use functions like `str()` or `glimpse()` to see what data type R thinks your variables are for the whole data set

::: {.panel-tabset}
## `glimpse`

```{r}
glimpse(raw)    # from the tidyverse/dplyr dataset
```


## `str`

```{r}
str(raw)    
```
:::

Both views show you the variable names, data types, and what the data in the first few rows looks like. 

## Initial Data Screening - single variable

You can also look at the data type for a single variable at a time. 

```{r}
typeof(raw$Island) 
class(raw$Island) 
str(raw$Island) 
```

## Check plausibility of data values

Confirm these values follow the expected values according to the codebook. 

<br>

Use `table()` for categorical variables  

```{r}
table(raw$Island)
```

and `summary()` on numeric variables to see the range of values present.

```{r}
summary(raw$`Body Mass (g)`)
```

## Data Prep questions {.smaller}

Questions to ask yourself (and the data) while reviewing the codebook to choose variables to be used in an analysis.

1. Are there codes that indicate missing? E.g. *MISSING* or *-99*? 
2. Do you need to make response codes more logical? 
    - Some systems will record 1=YES and 2=NO. This should be changed to 0=NO. 
3. Do you need to recode numerical variables to categorical?
    - Sometimes categorical data will be recorded as 1, 2, 3 etc when those numbers represent named categories. 
4. Do you need to create secondary variables such as an average across measures to create a score. 
5. Are the variable names user friendly? Mixtures of CAPS and lower case, names with spaces or special characters should all be changed. 

## How do I know what needs to be done?

Some of these answers will come only after you look at your data. This can be looking at the raw data itself but also looking at tables and charts generated from the data.

Often when you try to create a plot or table you will encounter an error or something odd looking that will be the notification that something has to be adjusted.

## How do I actually make the necessary changes?

-   After you identify what you need to do, you have to find an example of how to code the task you want.
-   The [Applied Stats Course notes](https://norcalbiostat.github.io/AppliedStatistics_notes/data-management.html) has specific examples on how to handle common changes
-   Take it one variable at a time.

## Looking for help 

* The internets can be a wonderful thing when it comes to learning new things. 
* The R landscape moves fast. Restrict your search to the past ~4 years. 
* Use keywords like `R project` or searching for package `vignette`s
* Stack Overflow and the Posit Community can have gems!

You will start to build up your repertoire of bookmarked sites you like to use.  

## Using Chat GPT to write code

:::{.callout-note}
### Example prompt
Using the palmer penguins dataset in R write me R code to change the factor order of the islands variable to put Dream first
:::

* I told it to use a built in data set
* I told it to use R
* I used R terminology such as "factor order" and "variable"

What did it give? 

## {#chatgpt data-menu-title="Chat GPT's answer" .smaller}

Sure, here's an example of how you can change the factor order of the `island` variable in the Palmer Penguins dataset to put "Dream" first using R:

```r
# Load necessary packages
library(palmerpenguins)

# Load the dataset
data("penguins")

# Check the current levels of the 'island' factor
levels(penguins$island)

# Reorder the levels of the 'island' factor to put "Dream" first
penguins$island <- factor(penguins$island, levels = c("Dream", "Torgersen", "Biscoe"))

# Check the new order of levels
levels(penguins$island)
```

In this code, we're first loading the `palmerpenguins` package, which provides access to the dataset. Then we load the dataset itself using `data("penguins")`. We check the current levels of the `island` factor using `levels(penguins$island)`.

Next, we use the `factor()` function to reorder the levels of the `island` variable. We specify the desired order of levels using the `levels` argument. In this case, we put "Dream" first, followed by the other islands. Finally, we check the new order of levels to make sure the change was successful.

Make sure you have the `palmerpenguins` package installed. You can install it using `install.packages("palmerpenguins")` if you haven't done so already.

## WOW!

Not only did it write the code, it wrote _literate_ code. It has code comments (lines 1, 4, 7, prefixed with a `#`), and a full text explanation. 

This is GREAT for learning how to write code!

:::{.callout-important}
### Plagerism warning

Read the Syllabus on what is expected of you if you use this tool to aid in your writing [https://math615.netlify.app/syllabus#use-of-ai](https://math615.netlify.app/syllabus#use-of-ai)
:::

:warning: Trust but verify! AI is not always correct! Also, this does not replace the necessity of you learning. 

## Closing thoughts

-   Do not underestimate the importance of this step
-   It will take you far, far longer than you anticipate to 'clean' your data
-   Writing code (in any language) will be challenging, but will pay off in the long run
